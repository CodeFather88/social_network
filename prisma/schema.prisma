generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String     @id @default(uuid())
    email     String     @unique
    password  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    roles     Role[]
    token     Token[]
    messages  Message[]
    chats     UserChat[]
    posts     Post[]
    likes     Like[]
    comments  Comment[]

    @@map("users")
}

enum Role {
    ADMIN
    USER
    SUPERADMIN
}

model Token {
    token     String   @unique
    exp       DateTime
    userId    String   @map("user_id")
    user      User     @relation(fields: [userId], references: [id])
    userAgent String   @map("user_agent")

    @@map("tokens")
}

model Chat {
    id         String     @id @default(uuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    usersCount Int        @map("users_count")
    name       String     @default("Групповой чат")
    creator    String
    messages   Message[]
    users      UserChat[]

    @@map("chats")
}

model Message {
    id        String   @id @default(uuid())
    text      String
    userId    String   @map("user_id")
    chatId    String   @map("chat_id")
    user      User     @relation(fields: [userId], references: [id])
    chat      Chat     @relation(fields: [chatId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("messages")
}

model UserChat {
    userId String @map("user_id")
    chatId String @map("chat_id")
    user   User   @relation(fields: [userId], references: [id])
    chat   Chat   @relation(fields: [chatId], references: [id])

    @@id([userId, chatId])
    @@map("user_chats")
}

model Like {
    id     String @id @default(uuid())
    userId String @map("user_id")
    postId String @map("post_id")
    user   User   @relation(fields: [userId], references: [id])
    post   Post   @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
    @@map("likes")
}

model Comment {
    id        String   @id @default(uuid())
    userId    String   @map("user_id")
    postId    String   @map("post_id")
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    Post      Post     @relation(fields: [postId], references: [id])

    @@map("comments")
}

model Post {
    id        String    @id @default(uuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    title     String
    content   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    likes     Like[]
    comments  Comment[]

    @@map("posts")
}
